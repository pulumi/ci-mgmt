package migrations

import (
	"os"
	"path/filepath"
	"strings"
	"testing"
)

const pluginsYaml = `plugins:
  - name: aws
    version: v5.0.0
  - name: eks
    version: v1.2.3
    kind: bridge
`

func TestMigrateCimgmtToMise_CreatesDefaultConfigAndPlugins(t *testing.T) {
	dir := t.TempDir()
	if err := os.MkdirAll(filepath.Join(dir, ".config"), 0o755); err != nil {
		t.Fatalf("create mise dir: %v", err)
	}

	ciMgmtPath := filepath.Join(dir, ".ci-mgmt.yaml")
	if err := os.WriteFile(ciMgmtPath, []byte(pluginsYaml), 0o644); err != nil {
		t.Fatalf("write ci-mgmt: %v", err)
	}

	migration := migrateCimgmtToMise{}
	if err := migration.Migrate("", dir); err != nil {
		t.Fatalf("first migrate: %v", err)
	}

	misePath := filepath.Join(dir, ".config", "mise.toml")
	data, err := os.ReadFile(misePath)
	if err != nil {
		t.Fatalf("read mise: %v", err)
	}

	content := string(data)
	for _, expected := range []string{
		"# WARNING: This file is autogenerated",
		"[env]",
		"PULUMI_HOME = \"{{config_root}}/.pulumi\"",
		"[tools]",
		"golangci-lint = \"1.64.8\"",
		"[settings]",
		`"vfox-pulumi:pulumi/pulumi-aws" = "latest"`,
		`"vfox-pulumi:pulumi/pulumi-bridge-eks" = "latest"`,
		"[plugins]",
		`vfox-pulumi = "https://github.com/pulumi/vfox-pulumi"`,
	} {
		if !strings.Contains(content, expected) {
			t.Fatalf("mise.toml missing %q. got:\n%s", expected, content)
		}
	}

	// Re-run to ensure idempotency.
	if err := migration.Migrate("", dir); err != nil {
		t.Fatalf("second migrate: %v", err)
	}

	dataAfter, err := os.ReadFile(misePath)
	if err != nil {
		t.Fatalf("read mise second run: %v", err)
	}
	if string(dataAfter) != content {
		t.Fatalf("mise.toml mutated on second run.\ninitial:\n%s\nsecond:\n%s", content, dataAfter)
	}

	ciDataAfter, err := os.ReadFile(ciMgmtPath)
	if err != nil {
		t.Fatalf("read ci-mgmt second run: %v", err)
	}
	if strings.Contains(string(ciDataAfter), "plugins:") {
		t.Fatalf("expected plugins to stay removed from ci-mgmt.yaml on second run")
	}

	ciData, err := os.ReadFile(ciMgmtPath)
	if err != nil {
		t.Fatalf("read ci-mgmt: %v", err)
	}
	if strings.Contains(string(ciData), "plugins:") {
		t.Fatalf("expected plugins to be removed from ci-mgmt.yaml after migration")
	}
}
