# WARNING: This file is autogenerated - changes will be overwritten when regenerated by https://github.com/pulumi/ci-mgmt
name: Publish

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      isPrerelease:
        required: true
        type: boolean
      skipGoSdk:
        default: false
        type: boolean
        description: Skip publishing & verifying the Go SDK
      skipJavaSdk:
        default: false
        type: boolean
        description: Skip publishing the Java SDK

env:
  IS_PRERELEASE: ${{ inputs.isPrerelease }}
#{{ .Config | renderPublishEnv | indent 2 }}#

jobs:
  publish:
    name: publish
    runs-on: #{{ if .Config.Runner.Publish }}##{{- .Config.Runner.Publish }}##{{ else }}##{{- .Config.Runner.Default }}##{{ end }}#
    steps:
    - name: Validate prerelease
      if: inputs.isPrerelease == false && (contains(inputs.version, '-') || contains(inputs.version, '+'))
      run: echo "Can't publish a prerelease version as a stable release. This is likely a bug in the calling workflow." && exit 1
    - name: Validate skipGoSdk
      if: inputs.skipGoSdk && inputs.isPrerelease == false
      run: echo "Can't skip Go SDK for stable releases. This is likely a bug in the calling workflow." && exit 1
    - name: Checkout Repo
      uses: #{{ .Config.ActionVersions.Checkout }}#
      with:
        #{{- if .Config.CheckoutSubmodules }}#
        submodules: #{{ .Config.CheckoutSubmodules }}#
        #{{- end }}#
        persist-credentials: false
    #{{- .Config | renderEscStep | indent 4 }}#
    - name: Setup mise
      uses: jdx/mise-action@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        cache_key: "mise-{{platform}}-${{ hashFiles('mise.lock') }}"
        cache_save: false
#{{- if .Config.Publish.CDN }}#
    - name: Configure AWS Credentials
      uses: #{{ .Config.ActionVersions.ConfigureAwsCredentials }}#
      with:
        aws-access-key-id: ${{ steps.esc-secrets.outputs.AWS_ACCESS_KEY_ID }}
        aws-region: us-east-2
        aws-secret-access-key: ${{ steps.esc-secrets.outputs.AWS_SECRET_ACCESS_KEY }}
        role-duration-seconds: 7200
        role-external-id: upload-pulumi-release
        role-session-name: #{{ .Config.Provider }}#@githubActions
        role-to-assume: ${{ steps.esc-secrets.outputs.AWS_UPLOAD_ROLE_ARN }}
#{{- end }}#
    - name: Create dist directory
      run: mkdir -p dist
    - name: Download provider assets
      uses: #{{ .Config.ActionVersions.DownloadArtifact }}#
      with:
        pattern: pulumi-resource-#{{ .Config.Provider }}#-v${{ inputs.version }}-*
        path: dist
        # Don't create a directory for each artifact
        merge-multiple: true
#{{- if not .Config.NoSchema }}#
    - name: Download schema
      uses: #{{ .Config.ActionVersions.DownloadArtifact }}#
      with:
        # Use a pattern to avoid failing if the artifact doesn't exist
        pattern: schema-embed.*
        # Avoid creating directories for each artifact
        merge-multiple: true
        path: dist
#{{- end }}#
    - name: Calculate checksums
      working-directory: dist
      run: shasum ./*.tar.gz > "pulumi-#{{ .Config.Provider }}#_${{ inputs.version }}_checksums.txt"
#{{- if not .Config.NoSchema }}#
    - name: Get Schema Change Summary
      id: schema-summary
      shell: bash
      run: |
        # Get latest stable release. Return only first column from result (tag).
        LAST_VERSION=$(gh release view --repo #{{ .Config.Organization }}#/pulumi-#{{ .Config.Provider }}# --json tagName -q .tagName || echo "No stable release" )
        {
          echo 'summary<<EOF'
          if [[ "$LAST_VERSION" != "No stable release" ]]; then
            schema-tools compare --provider="#{{ .Config.Provider }}#" --old-commit="$LAST_VERSION" --repository="github://api.github.com/#{{ .Config.Organization }}#" --new-commit="--local-path=provider/cmd/pulumi-resource-#{{ .Config.Provider }}#/schema.json"
          fi
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"
#{{- end }}#
#{{- if .Config.Publish.CDN }}#
    - name: Upload Provider Binaries
      run: aws s3 cp dist s3://get.pulumi.com/releases/plugins/ --recursive
#{{- end }}#
    - name: Create GH Release
      uses: softprops/action-gh-release@aec2ec56f94eb8180ceec724245f64ef008b89f5 # v2
      if: inputs.isPrerelease == false
      with:
        tag_name: v${{ inputs.version }}
        prerelease: ${{ inputs.isPrerelease }}
        # We keep pre-releases as drafts so they're not visible until we manually publish them.
        draft: ${{ inputs.isPrerelease }}
#{{- if not .Config.NoSchema }}#
        body: ${{ steps.schema-summary.outputs.summary }}
#{{- else }}#
        body: |
          Release v${{ inputs.version }}
#{{- end }}#
        generate_release_notes: true
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#{{ if not .Config.NoSchema }}#
  publish_sdk:
    name: publish_sdk
    needs: publish
    runs-on: #{{ .Config.Runner.Default }}#
    outputs:
      python_version: ${{ steps.python_version.outputs.version }}
    steps:
    - name: Checkout Repo
      uses: #{{ .Config.ActionVersions.Checkout }}#
      with:
        #{{- if .Config.CheckoutSubmodules }}#
        submodules: #{{ .Config.CheckoutSubmodules }}#
        #{{- end }}#
        # Persist credentials so we can push back to the repo
        persist-credentials: true
    #{{- .Config | renderEscStep | indent 4 }}#
    - name: Setup mise
      uses: jdx/mise-action@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        cache_key: "mise-{{platform}}-{{file_hash}}"
        # only saving the cache in the prerequisites job
        cache_save: false
    - name: Setup Node
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
      with:
        # we don't set node-version because we install with mise.
        # this step is needed to setup npm auth
        registry-url: https://registry.npmjs.org
    - name: Publish SDKs
      if: inputs.skipJavaSdk == false
      uses: pulumi/pulumi-package-publisher@c1672c7928591d563dccb12729e05e315c21f8c2 # v0.0.22
      with:
        sdk: #{{ .Config.Publish.SDK }}#
        version: ${{ inputs.version }}
      env:
        PYPI_USERNAME: __token__
        PYPI_PASSWORD: ${{ steps.esc-secrets.outputs.PYPI_API_TOKEN }}
        NODE_AUTH_TOKEN: ${{ steps.esc-secrets.outputs.NPM_TOKEN }}
        SIGNING_KEY: ${{ steps.esc-secrets.outputs.JAVA_SIGNING_KEY }}
        SIGNING_KEY_ID: ${{ steps.esc-secrets.outputs.JAVA_SIGNING_KEY_ID }}
        SIGNING_PASSWORD: ${{ steps.esc-secrets.outputs.JAVA_SIGNING_PASSWORD }}
        PUBLISH_REPO_PASSWORD: ${{ steps.esc-secrets.outputs.OSSRH_PASSWORD }}
        PUBLISH_REPO_USERNAME: ${{ steps.esc-secrets.outputs.OSSRH_USERNAME }}
        NUGET_PUBLISH_KEY: ${{ steps.esc-secrets.outputs.NUGET_PUBLISH_KEY }}
    - name: Publish SDKs (except Java)
      if: inputs.skipJavaSdk == true
      uses: pulumi/pulumi-package-publisher@c1672c7928591d563dccb12729e05e315c21f8c2 # v0.0.22
      with:
        sdk: #{{ .Config.Publish.SDK }}#,!java
        version: ${{ inputs.version }}
      env:
        PYPI_USERNAME: __token__
        PYPI_PASSWORD: ${{ steps.esc-secrets.outputs.PYPI_API_TOKEN }}
        NODE_AUTH_TOKEN: ${{ steps.esc-secrets.outputs.NPM_TOKEN }}
        SIGNING_KEY: ${{ steps.esc-secrets.outputs.JAVA_SIGNING_KEY }}
        SIGNING_KEY_ID: ${{ steps.esc-secrets.outputs.JAVA_SIGNING_KEY_ID }}
        SIGNING_PASSWORD: ${{ steps.esc-secrets.outputs.JAVA_SIGNING_PASSWORD }}
        NUGET_PUBLISH_KEY: ${{ steps.esc-secrets.outputs.NUGET_PUBLISH_KEY }}
    - name: Download Go SDK
      uses: ./.github/actions/download-sdk
      with:
        language: go
    - uses: pulumi/publish-go-sdk-action@v1
      if: inputs.skipGoSdk == false
      with:
        repository: ${{ github.repository }}
        base-ref: ${{ github.sha }}
        source: sdk
        path: sdk
        version: ${{ inputs.version }}
        additive: false
        # Avoid including other language SDKs & artifacts in the commit
        files: |
          go.*
          go/**
          !*.tar.gz
    - name: Extract python version
      id: python_version
      working-directory: sdk/python
      run: |
        pip install toml-cli==0.7.0
        version=$(toml get --toml-path pyproject.toml project.version)
        echo "version=${version}" >> "$GITHUB_OUTPUT"
#{{- end }}#

#{{- if and .Config.PublishRegistry (not .Config.NoSchema) }}#
  create_docs_build:
    name: create_docs_build
    needs: publish_sdk
    # Only run for non-prerelease, if the publish_go_sdk job was successful or skipped
    if: inputs.isPrerelease == false
    runs-on: #{{ .Config.Runner.Default }}#
    steps:
      - name: Checkout Repo
        uses: #{{ .Config.ActionVersions.Checkout }}#
        with:
          persist-credentials: false
      #{{- .Config | renderEscStep | indent 6 }}#
      - name: Dispatch Metadata build
        uses: peter-evans/repository-dispatch@5fc4efd1a4797ddb68ffd0714a238564e4cc0e6f # v4
        with:
          token: ${{ steps.esc-secrets.outputs.PULUMI_BOT_TOKEN }}
          repository: pulumi/registry
          event-type: resource-provider
          client-payload: |-
            {
              "project": "${{ github.repository }}",
              "project-shortname": "#{{ .Config.Provider }}#",
              "ref": "${{ github.ref_name }}"
            }
#{{- end }}#

  clean_up_release_labels:
    name: Clean up release labels
    # Only run for non-prerelease, if the publish_go_sdk job was successful or skipped
    if: inputs.isPrerelease == false
    #{{ if .Config.PublishRegistry -}}#
    needs: #{{ if not .Config.NoSchema }}#create_docs_build#{{ else }}#publish#{{ end }}#
    #{{ else }}#
    needs: publish_sdk
    #{{- end }}#
    runs-on: #{{ .Config.Runner.Default }}#
    steps:
    - name: Checkout Repo
      uses: #{{ .Config.ActionVersions.Checkout }}#
      with:
        persist-credentials: false
    #{{- .Config | renderEscStep | indent 4 }}#
    - name: Clean up release labels
      uses: pulumi/action-release-by-pr-label@main
      with:
        command: "clean-up-release-labels"
        repo: ${{ github.repository }}
        commit: ${{ github.sha }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  verify_release:
    name: verify_release
#{{- if not .Config.NoSchema }}#
    needs: publish_sdk
#{{- else }}#
    needs: publish
#{{- end }}#
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/verify-release.yml
    secrets: inherit
    with:
      providerVersion: ${{ inputs.version }}
      skipGoSdk: ${{ inputs.skipGoSdk }}
#{{- if not .Config.NoSchema }}#
      pythonVersion: ${{ needs.publish_sdk.outputs.python_version }}
#{{- end }}#
