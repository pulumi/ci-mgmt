name: "Verify Release"

on:
  workflow_dispatch:
    inputs:
      providerVersion:
        description: "The version of the provider to verify"
        required: true
        type: string
      enableMacRunner:
        description: "Enable the MacOS runner in addition to Linux and Windows. Defaults to 'false'."
        required: false
        type: boolean
      skipGoSdk:
        description: "Skip the Go SDK verification. Defaults to 'false'. Enable this when verifying a pre-release for which we don't publish the Go SDK (for PRs and the default branch)."
        required: false
        type: boolean
        default: false
      pythonVersion:
        description: "Optional python SDK version to verify. Defaults to inputs.providerVersion."
        type: string
        required: false
  workflow_call:
    inputs:
      providerVersion:
        description: "The version of the provider to verify"
        required: true
        type: string
      skipGoSdk:
        description: "Skip the Go SDK verification. Defaults to 'false'. This is used when we're not publishing a Go SDK on the default branch build."
        required: false
        type: boolean
        default: false
      pythonVersion:
        description: "Optional python SDK version to verify. Defaults to inputs.providerVersion."
        type: string
        required: false

env:
#{{ .Config | renderPublishEnv | indent 2 }}#

jobs:
  verify-release:
    name: verify-release
#{{- if not .Config.ReleaseVerification }}#
    # We don't have any release verification configurations, so we never run this workflow.
    # Configure your .ci-mgmt.yaml files to include the release verification configurations e.g.
    # releaseVerification:
    #   nodejs: path/to/nodejs/project
    #   python: path/to/python/project
    #   dotnet: path/to/dotnet/project
    #   go: path/to/go/project
    if: false
#{{- end }}#
    strategy:
      matrix:
#{{- if .Config.ReleaseVerification }}#
        runner: ["ubuntu-latest", "windows-latest", "macos-latest"]
#{{- else }}#
        # We don't have any release verification configurations, so we only run on Linux to print warnings to help users configure the release verification.
        runner: ["ubuntu-latest"]
#{{- end }}#
    runs-on: ${{ matrix.runner }}
#{{- if .Config.ReleaseVerification }}#
    permissions:
      contents: 'read'
      id-token: 'write'
#{{- end }}#
    steps:
      - name: Configure Git to checkout files with long names
        run: git config --global core.longpaths true
      - name: Checkout Repo
        uses: #{{ .Config.ActionVersions.Checkout }}#
        with:
          persist-credentials: false
      #{{- .Config | renderEscStep | indent 6 }}#
      #{{- range .Config.Languages }}#
      #{{- if eq . "python" }}#
      - name: Setup Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: #{{ $.Config.ToolVersions.Python }}#
      #{{- end }}#
      #{{- end }}#
      #{{- range .Config.Languages }}#
      #{{- if eq . "java" }}#
      - name: Setup Java
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          cache: gradle
          distribution: temurin
          java-version: #{{ $.Config.ToolVersions.Java }}#
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@ed408507eac070d1f99cc633dbcf757c94c7933a # v4.4.3
        with:
          gradle-version: #{{ $.Config.ToolVersions.Gradle }}#
      #{{- end }}#
      #{{- end }}#
      #{{- range .Config.Languages }}#
      #{{- if eq . "dotnet" }}#
      - name: Setup DotNet
        uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5.0.0
        with:
          dotnet-version: #{{ $.Config.ToolVersions.Dotnet }}#
      #{{- end }}#
      #{{- end }}#
      #{{- range .Config.Languages }}#
      #{{- if eq . "nodejs" }}#
      - name: Setup Node
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: #{{ $.Config.ToolVersions.Nodejs }}#
          registry-url: https://registry.npmjs.org
      #{{- end }}#
      #{{- end }}#
      #{{- range .Config.Languages }}#
      #{{- if eq . "go" }}#
      - name: Install Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: "#{{ $.Config.ToolVersions.Go }}#"
          cache-dependency-path: |
            provider/*.sum
            upstream/*.sum
            sdk/go/*.sum
            sdk/*.sum
            *.sum
          cache: true
      #{{- end }}#
      #{{- end }}#
      - name: Install Pulumi CLI
        uses: pulumi/actions@d7ceb0215da5a14ec84f50b703365ddf0194a9c8 # v6
        with:
          pulumi-version: "#{{ .Config.ToolVersions.Pulumi }}#"
#{{- if .Config.ReleaseVerification }}#
      #{{- if .Config.AWS }}#
      - name: Generate Pulumi Access Token
        id: generate_pulumi_token
        uses: #{{ .Config.ActionVersions.ESCAuth }}#
        with:
          organization: pulumi
          requested-token-type: urn:pulumi:token-type:access_token:organization
          export-environment-variables: false
      # workaround for https://github.com/pulumi/esc-action/issues/10
      - name: Install esc on Windows
        if: ${{ matrix.runner == 'windows-latest' }}
        shell: pwsh
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          iex ((New-Object System.Net.WebClient).DownloadString('https://get.pulumi.com/esc/install.ps1'))
          Copy-Item "$env:USERPROFILE\.pulumi\bin\esc.exe" "C:\Windows\System32\esc.exe"
      - name: Export AWS Credentials
        uses: #{{ .Config.ActionVersions.ESCAction }}#
        env:
          PULUMI_ACCESS_TOKEN: ${{ steps.generate_pulumi_token.outputs.pulumi-access-token }}
        with:
          environment: logins/pulumi-ci
      #{{- end }}#
      #{{- if .Config.GCP }}#
      - name: Authenticate to Google Cloud
        uses: #{{ .Config.ActionVersions.GoogleAuth }}#
        with:
          service_account: ${{ env.GOOGLE_CI_SERVICE_ACCOUNT_EMAIL }}
          workload_identity_provider: projects/${{ env.GOOGLE_PROJECT_NUMBER
            }}/locations/global/workloadIdentityPools/${{
            env.GOOGLE_CI_WORKLOAD_IDENTITY_POOL }}/providers/${{
            env.GOOGLE_CI_WORKLOAD_IDENTITY_PROVIDER }}
      - name: Setup gcloud auth
        uses: #{{ .Config.ActionVersions.SetupGcloud }}#
        with:
          install_components: gke-gcloud-auth-plugin
      #{{- end }}#
      #{{- if .Config.GCPRegistry }}#
      - name: Login to Google Cloud Registry
        run: gcloud --quiet auth configure-docker gcr.io,us-central1-docker.pkg.dev # Ensure that all test artifact registry locations are supplied here.
      #{{- end }}#
#{{- if .Config.Actions.PreTest }}#
#{{ .Config.Actions.PreTest | toYaml | indent 6 }}#
#{{- end }}#
#{{- if .Config.ReleaseVerification.Nodejs }}#
      - name: Verify nodejs release
        uses: #{{ .Config.ActionVersions.VerifyProviderRelease }}#
        with:
          runtime: nodejs
          directory: #{{ .Config.ReleaseVerification.Nodejs }}#
          provider: #{{ .Config.Provider }}#
          providerVersion: ${{ inputs.providerVersion }}
        env:
          NODE_AUTH_TOKEN: ${{ steps.esc-secrets.outputs.NPM_TOKEN }}
#{{ .Config | renderLocalEnv | indent 10 }}#
#{{- end }}#
#{{- if .Config.ReleaseVerification.Python }}#
      - name: Verify python release
        uses: #{{ .Config.ActionVersions.VerifyProviderRelease }}#
        with:
          runtime: python
          directory: #{{ .Config.ReleaseVerification.Python }}#
          provider: #{{ .Config.Provider }}#
          providerVersion: ${{ inputs.providerVersion }}
          packageVersion: ${{ inputs.pythonVersion || inputs.providerVersion }}
        env:
#{{ .Config | renderLocalEnv | indent 10 }}#
#{{- end }}#
#{{- if .Config.ReleaseVerification.Dotnet }}#
      - name: Verify dotnet release
        uses: #{{ .Config.ActionVersions.VerifyProviderRelease }}#
        with:
          runtime: dotnet
          directory: #{{ .Config.ReleaseVerification.Dotnet }}#
          provider: #{{ .Config.Provider }}#
          providerVersion: ${{ inputs.providerVersion }}
        env:
#{{ .Config | renderLocalEnv | indent 10 }}#
#{{- end }}#
#{{- if .Config.ReleaseVerification.Go }}#
      - name: Verify go release
        uses: #{{ .Config.ActionVersions.VerifyProviderRelease }}#
        if: inputs.skipGoSdk == false
        with:
          runtime: go
          directory: #{{ .Config.ReleaseVerification.Go }}#
          provider: #{{ .Config.Provider }}#
          providerVersion: ${{ inputs.providerVersion }}
        env:
#{{ .Config | renderLocalEnv | indent 10 }}#
#{{- end }}#
#{{- end }}#
