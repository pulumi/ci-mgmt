# WARNING: This file is autogenerated - changes will be overwritten if not made via https://github.com/pulumi/ci-mgmt
name: Publish

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      isPrerelease:
        required: true
        type: boolean
      skipGoSdk:
        default: false
        type: boolean
        description: Skip publishing & verifying the Go SDK

env:
  IS_PRERELEASE: ${{ inputs.isPrerelease }}
#{{ .Config.env | toYaml | indent 2 }}#

jobs:
  publish:
    name: publish
    runs-on: #{{ if .Config.runner.publish }}##{{- .Config.runner.publish }}##{{ else }}##{{- .Config.runner.default }}##{{ end }}#
    steps:
    - name: Validate prerelease
      if: inputs.isPrerelease == false && (contains(inputs.version, '-') || contains(inputs.version, '+'))
      run: echo "Can't publish a prerelease version as a stable release. This is likely a bug in the calling workflow." && exit 1
    - name: Validate skipGoSdk
      if: inputs.skipGoSdk && inputs.isPrerelease == false
      run: echo "Can't skip Go SDK for stable releases. This is likely a bug in the calling workflow." && exit 1
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.3.1
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false
        swap-storage: false
    - name: Checkout Repo
      uses: #{{ .Config.actionVersions.checkout }}#
#{{- if .Config.checkoutSubmodules }}#
      with:
        submodules: #{{ .Config.checkoutSubmodules }}#
#{{- end }}#
    - name: Setup tools
      uses: ./.github/actions/setup-tools
      with:
        tools: pulumictl, pulumicli, go
    - name: Configure AWS Credentials
      uses: #{{ .Config.actionVersions.configureAwsCredentials }}#
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: us-east-2
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-duration-seconds: 7200
        role-external-id: upload-pulumi-release
        role-session-name: #{{ .Config.provider }}#@githubActions
        role-to-assume: ${{ secrets.AWS_UPLOAD_ROLE_ARN }}
    - name: Run GoReleaser
      if: inputs.isPrerelease == false
      uses: #{{ .Config.actionVersions.goReleaser }}#
      env:
        GORELEASER_CURRENT_TAG: v${{ inputs.version }}
        PROVIDER_VERSION: ${{ inputs.version }}
      with:
        args: -p #{{ .Config.parallel }}# release --rm-dist --timeout #{{ .Config.timeout }}#m0s
        version: latest
    - name: Run GoReleaser (prerelease)
      if: inputs.isPrerelease == true
      uses: #{{ .Config.actionVersions.goReleaser }}#
      env:
        GORELEASER_CURRENT_TAG: v${{ inputs.version }}
        PROVIDER_VERSION: ${{ inputs.version }}
      with:
        args: -p #{{ .Config.parallel }}# -f .goreleaser.prerelease.yml --rm-dist --skip-validate --timeout
          #{{ .Config.timeout }}#m0s
        version: latest

  publish_sdk:
    name: publish_sdk
    needs: publish
    runs-on: #{{ .Config.runner.default }}#
    steps:
    - name: Checkout Repo
      uses: #{{ .Config.actionVersions.checkout }}#
#{{- if .Config.checkoutSubmodules }}#
      with:
        submodules: #{{ .Config.checkoutSubmodules }}#
#{{- end }}#
    - name: Setup tools
      uses: ./.github/actions/setup-tools
      with:
        tools: pulumictl, pulumicli, go, node, dotnet, python, java
    - name: Publish SDKs
      uses: pulumi/pulumi-package-publisher@v0.0.19
      with:
        sdk: #{{ .Config.publish.sdk }}#
        version: ${{ inputs.version }}
    - name: Download Go SDK
      uses: ./.github/actions/download-sdk
      with:
        language: go
    - uses: pulumi/publish-go-sdk-action@v1
      if: inputs.skipGoSdk == false
      with:
        repository: ${{ github.repository }}
        base-ref: ${{ github.sha }}
        source: sdk
        path: sdk
        version: ${{ inputs.version }}
        additive: false
        # Avoid including other language SDKs & artifacts in the commit
        files: |
          go.*
          go/**
          !*.tar.gz

#{{- if .Config.publishRegistry }}#
  create_docs_build:
    name: create_docs_build
    needs: publish_sdk
    # Only run for non-prerelease, if the publish_go_sdk job was successful or skipped
    if: inputs.isPrerelease == false
    runs-on: #{{ .Config.runner.default }}#
    steps:
      - name: Dispatch Metadata build
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PULUMI_BOT_TOKEN }}
          repository: pulumi/registry
          event-type: resource-provider
          client-payload: |-
            {
              "project": "${{ github.repository }}",
              "project-shortname": "#{{ .Config.provider }}#",
              "ref": "${{ github.ref_name }}"
            }
#{{- end }}#

  clean_up_release_labels:
    name: Clean up release labels
    # Only run for non-prerelease, if the publish_go_sdk job was successful or skipped
    if: inputs.isPrerelease == false
    #{{ if .Config.publishRegistry -}}#
    needs: create_docs_build
    #{{ else }}#
    needs: publish_sdk
    #{{- end }}#
    runs-on: #{{ .Config.runner.default }}#
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
    - name: Clean up release labels
      uses: pulumi/action-release-by-pr-label@main
      with:
        command: "clean-up-release-labels"
        repo: ${{ github.repository }}
        commit: ${{ github.sha }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  verify_release:
    name: verify_release
    needs: publish_sdk
    uses: ./.github/workflows/verify-release.yml
    secrets: inherit
    with:
      providerVersion: ${{ inputs.version }}
      # Prelease is run often but we only have 5 concurrent macos runners, so we only test after the stable release.
      enableMacosRunner: ${{ inputs.isPrerelease == false }}
      skipGoSdk: ${{ inputs.skipGoSdk }}
