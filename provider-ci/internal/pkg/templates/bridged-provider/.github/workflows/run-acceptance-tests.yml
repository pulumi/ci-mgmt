# WARNING: This file is autogenerated - changes will be overwritten if not made via https://github.com/pulumi/ci-mgmt

env:
  PROVIDER: #{{ .Config.provider }}#
  PR_COMMIT_SHA: ${{ github.event.client_payload.pull_request.head.sha }}
#{{ .Config.env | toYaml | indent 2 }}#
jobs:
  build_sdk:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    name: build_sdk
    needs: prerequisites
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: #{{ .Config.actionVersions.checkout }}#
      with:
        ref: ${{ env.PR_COMMIT_SHA }}
    - name: Checkout Scripts Repo
      uses: #{{ .Config.actionVersions.checkout }}#
      with:
        path: ci-scripts
        repository: pulumi/scripts
    - name: Unshallow clone for tags
      run: git fetch --prune --unshallow --tags
    - name: Install Go
      uses: #{{ .Config.actionVersions.setupGo }}#
      with:
        go-version: 1.20.1
    - name: Install pulumictl
      uses: #{{ .Config.actionVersions.installGhRelease }}#
      with:
        repo: pulumi/pulumictl
    - name: Install Pulumi CLI
      uses: #{{ .Config.actionVersions.installPulumiCli }}#
    - name: Setup Node
      uses: #{{ .Config.actionVersions.setupNode }}#
      with:
        node-version: ${{ env.NODEVERSION }}
        registry-url: https://registry.npmjs.org
    - name: Setup DotNet
      uses: #{{ .Config.actionVersions.setupDotNet }}#
      with:
        dotnet-version: ${{ env.DOTNETVERSION }}
    - name: Setup Python
      uses: #{{ .Config.actionVersions.setupPython }}#
      with:
        python-version: ${{ env.PYTHONVERSION }}
    - name: Setup Java
      uses: #{{ .Config.actionVersions.setupJava }}#
      with:
        cache: gradle
        distribution: temurin
        java-version: ${{ env.JAVAVERSION }}
    - name: Setup Gradle
      uses: #{{ .Config.actionVersions.setupGradle }}#
      with:
        gradle-version: "7.6"
    - name: Download provider + tfgen binaries
      uses: #{{ .Config.actionVersions.downloadArtifact }}#
      with:
        name: ${{ env.PROVIDER }}-provider.tar.gz
        path: ${{ github.workspace }}/bin
    - name: Untar provider binaries
      run: >-
        tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{
        github.workspace}}/bin

        find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print -exec chmod +x {} \;
    - name: Install plugins
      run: make install_plugins
    - name: Update path
      run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
    - name: Set PACKAGE_VERSION to Env
      run: echo "PACKAGE_VERSION=$(pulumictl get version --language generic)" >>
        "$GITHUB_ENV"
    - name: Build SDK
      run: make build_${{ matrix.language }}
    - name: Check worktree clean
      run: ./ci-scripts/ci/check-worktree-is-clean
    - name: Compress SDK folder
      run: tar -zcf sdk/${{ matrix.language }}.tar.gz -C sdk/${{ matrix.language }} .
    - name: Upload artifacts
      uses: #{{ .Config.actionVersions.uploadArtifact }}#
      with:
        name: ${{ matrix.language  }}-sdk.tar.gz
        path: ${{ github.workspace}}/sdk/${{ matrix.language }}.tar.gz
    - if: failure() && github.event_name == 'push'
      name: Notify Slack
      uses: #{{ .Config.actionVersions.notifySlack }}#
      with:
        author_name: Failure in building ${{ matrix.language }} sdk
        fields: repo,commit,author,action
        status: ${{ job.status }}
    strategy:
      fail-fast: true
      matrix:
        language:
        - nodejs
        - python
        - dotnet
        - go
        - java
  comment-notification:
    if: github.event_name == 'repository_dispatch'
    name: comment-notification
    runs-on: ubuntu-latest
    steps:
    - id: run-url
      name: Create URL to the run output
      run: echo "run-url=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> "$GITHUB_OUTPUT"
    - name: Update with Result
      uses: #{{ .Config.actionVersions.createOrUpdateComment }}#
      with:
        body: "Please view the PR build: ${{ steps.run-url.outputs.run-url }}"
        issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
        repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
        token: ${{ secrets.PULUMI_BOT_TOKEN }}
  #{{ if .Config.lint -}}#
  lint:
    container: golangci/golangci-lint:v1.51
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    name: lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: #{{ .Config.actionVersions.checkout }}#
      with:
        ref: ${{ env.PR_COMMIT_SHA }}
    - name: Checkout Scripts Repo
      uses: #{{ .Config.actionVersions.checkout }}#
      with:
        path: ci-scripts
        repository: pulumi/scripts
    - name: Mark repo as safe directory
      run: git config --global --add safe.directory /__w/pulumi-${{ env.PROVIDER }}/pulumi-${{ env.PROVIDER }}
    - name: Unshallow clone for tags
      run: git fetch --prune --unshallow --tags
    - name: Install Go
      uses: #{{ .Config.actionVersions.setupGo }}#
      with:
        go-version: 1.20.1
    - name: Install pulumictl
      uses: #{{ .Config.actionVersions.installGhRelease }}#
      with:
        repo: pulumi/pulumictl
    - name: Install Pulumi CLI
      uses: #{{ .Config.actionVersions.installPulumiCli }}#
    - run: make lint_provider
    - if: failure() && github.event_name == 'push'
      name: Notify Slack
      uses: #{{ .Config.actionVersions.notifySlack }}#
      with:
        author_name: Failure in linting provider
        fields: repo,commit,author,action
        status: ${{ job.status }}
  #{{ end -}}#
  prerequisites:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    name: prerequisites
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: #{{ .Config.actionVersions.checkout }}#
      with:
        ref: ${{ env.PR_COMMIT_SHA }}
    - name: Checkout Scripts Repo
      uses: #{{ .Config.actionVersions.checkout }}#
      with:
        path: ci-scripts
        repository: pulumi/scripts
    - name: Unshallow clone for tags
      run: git fetch --prune --unshallow --tags
    - name: Install Go
      uses: #{{ .Config.actionVersions.setupGo }}#
      with:
        go-version: 1.20.1
    - name: Install pulumictl
      uses: #{{ .Config.actionVersions.installGhRelease }}#
      with:
        repo: pulumi/pulumictl
    - name: Install Pulumi CLI
      uses: #{{ .Config.actionVersions.installPulumiCli }}#
    - if: github.event_name == 'pull_request'
      name: Install Schema Tools
      uses: #{{ .Config.actionVersions.installGhRelease }}#
      with:
        repo: pulumi/schema-tools
    - name: Build tfgen & provider binaries
      run: make provider
    - if: github.event_name == 'pull_request'
      name: Check Schema is Valid
      run: |
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        {
          echo "SCHEMA_CHANGES<<$EOF";
          schema-tools compare -p ${{ env.PROVIDER }} -o ${{ github.event.repository.default_branch }} -n --local-path=provider/cmd/pulumi-resource-${{ env.PROVIDER }}/schema.json;
          echo "$EOF";
        } >> "$GITHUB_ENV"
    - if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'
      name: Comment on PR with Details of Schema Check
      uses: #{{ .Config.actionVersions.prComment }}#
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        comment_tag: schemaCheck
        message: >+
          ### Does the PR have any schema changes?


          ${{ env.SCHEMA_CHANGES }}


          Maintainer note: consult the [runbook](https://github.com/pulumi/platform-providers-team/blob/main/playbooks/tf-provider-updating.md) for dealing with any breaking changes.

    - name: Tar provider binaries
      run: tar -zcf ${{ github.workspace }}/bin/provider.tar.gz -C ${{
        github.workspace }}/bin/ pulumi-resource-${{ env.PROVIDER }}
        pulumi-tfgen-${{ env.PROVIDER }}
    - name: Upload artifacts
      uses: #{{ .Config.actionVersions.uploadArtifact }}#
      with:
        name: ${{ env.PROVIDER }}-provider.tar.gz
        path: ${{ github.workspace }}/bin/provider.tar.gz
    - if: failure() && github.event_name == 'push'
      name: Notify Slack
      uses: #{{ .Config.actionVersions.notifySlack }}#
      with:
        author_name: Failure in building provider prerequisites
        fields: repo,commit,author,action
        status: ${{ job.status }}
  sentinel:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    name: sentinel
    needs:
    - test
    #{{ if .Config.lint -}}#
    - lint
    - lint_sdk
    #{{ end -}}#
    runs-on: ubuntu-latest
    steps:
    - name: Is workflow a success
      run: echo yes
  test:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    name: test
    needs: build_sdk
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: #{{ .Config.actionVersions.checkout }}#
      with:
        ref: ${{ env.PR_COMMIT_SHA }}
    - name: Checkout Scripts Repo
      uses: #{{ .Config.actionVersions.checkout }}#
      with:
        path: ci-scripts
        repository: pulumi/scripts
    - name: Unshallow clone for tags
      run: git fetch --prune --unshallow --tags
    - name: Install Go
      uses: #{{ .Config.actionVersions.setupGo }}#
      with:
        go-version: 1.20.1
    - name: Install pulumictl
      uses: #{{ .Config.actionVersions.installGhRelease }}#
      with:
        repo: pulumi/pulumictl
    - name: Install Pulumi CLI
      uses: #{{ .Config.actionVersions.installPulumiCli }}#
    - name: Setup Node
      uses: #{{ .Config.actionVersions.setupNode }}#
      with:
        node-version: ${{ env.NODEVERSION }}
        registry-url: https://registry.npmjs.org
    - name: Setup DotNet
      uses: #{{ .Config.actionVersions.setupDotNet }}#
      with:
        dotnet-version: ${{ env.DOTNETVERSION }}
    - name: Setup Python
      uses: #{{ .Config.actionVersions.setupPython }}#
      with:
        python-version: ${{ env.PYTHONVERSION }}
    - name: Setup Java
      uses: #{{ .Config.actionVersions.setupJava }}#
      with:
        cache: gradle
        distribution: temurin
        java-version: ${{ env.JAVAVERSION }}
    - name: Setup Gradle
      uses: #{{ .Config.actionVersions.setupGradle }}#
      with:
        gradle-version: "7.6"
    - name: Download provider + tfgen binaries
      uses: #{{ .Config.actionVersions.downloadArtifact }}#
      with:
        name: ${{ env.PROVIDER }}-provider.tar.gz
        path: ${{ github.workspace }}/bin
    - name: Untar provider binaries
      run: >-
        tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{
        github.workspace}}/bin

        find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print -exec chmod +x {} \;
    - run: dotnet nuget add source ${{ github.workspace }}/nuget
    - name: Download SDK
      uses: #{{ .Config.actionVersions.downloadArtifact }}#
      with:
        name: ${{ matrix.language }}-sdk.tar.gz
        path: ${{ github.workspace}}/sdk/
    - name: Uncompress SDK folder
      run: tar -zxf ${{ github.workspace }}/sdk/${{ matrix.language }}.tar.gz -C ${{
        github.workspace }}/sdk/${{ matrix.language }}
    - name: Update path
      run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
    - name: Install Python deps
      run: |-
        pip3 install virtualenv==20.0.23
        pip3 install pipenv
    #{{- if .Config.docker }}#
    - name: Run docker-compose
      run: docker-compose -f testing/docker-compose.yml up --build -d
    #{{- end }}#
    #{{- if .Config.aws }}#
    - name: Configure AWS Credentials
      uses: #{{ .Config.actionVersions.configureAwsCredentials }}#
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: ${{ env.AWS_REGION }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-duration-seconds: 3600
        role-session-name: ${{ env.PROVIDER }}@githubActions
        role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
    #{{- end }}#
    #{{- if .Config.gcp }}#
    - name: Authenticate to Google Cloud
      uses: #{{ .Config.actionVersions.googleAuth }}#
      with:
        service_account: ${{ env.GOOGLE_CI_SERVICE_ACCOUNT_EMAIL }}
        workload_identity_provider: projects/${{ env.GOOGLE_PROJECT_NUMBER
          }}/locations/global/workloadIdentityPools/${{
          env.GOOGLE_CI_WORKLOAD_IDENTITY_POOL }}/providers/${{
          env.GOOGLE_CI_WORKLOAD_IDENTITY_PROVIDER }}
    - name: Setup gcloud auth
      uses: #{{ .Config.actionVersions.setupGcloud }}#
      with:
        install_components: gke-gcloud-auth-plugin
    #{{- end }}#
    #{{- if .Config.gcpRegistry }}#
    - name: Login to Google Cloud Registry
      run: gcloud --quiet auth configure-docker
    #{{- end }}#
    #{{- if index .Config "setup-script" }}#
    - name: Run setup script
      run: #{{ index .Config "setup-script" }}#
    #{{- end }}#
    - name: Install dependencies
      run: make install_${{ matrix.language}}_sdk
    - name: Install gotestfmt
      uses: GoTestTools/gotestfmt-action@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        version: v2.4.0
    - name: Run tests
      run: cd examples && go test -v -json -count=1 -cover -timeout 2h -tags=${{
        matrix.language }} -parallel 4 . 2>&1 | tee /tmp/gotest.log | gotestfmt
    - if: failure() && github.event_name == 'push'
      name: Notify Slack
      uses: #{{ .Config.actionVersions.notifySlack }}#
      with:
        author_name: Failure in running ${{ matrix.language }} tests
        fields: repo,commit,author,action
        status: ${{ job.status }}
    strategy:
      fail-fast: false
      matrix:
        language:
        - nodejs
        - python
        - dotnet
        - go
        - java
name: run-acceptance-tests
on:
  pull_request:
    branches:
    - master
    - main
    paths-ignore:
    - CHANGELOG.md
  repository_dispatch:
    types:
    - run-acceptance-tests-command
