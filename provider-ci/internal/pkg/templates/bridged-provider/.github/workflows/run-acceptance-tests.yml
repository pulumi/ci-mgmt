# WARNING: This file is autogenerated - changes will be overwritten when regenerated by https://github.com/pulumi/ci-mgmt

name: run-acceptance-tests

on:
  pull_request:
    paths-ignore:
    - CHANGELOG.md
  repository_dispatch:
    types:
    - run-acceptance-tests-command

env:
  PR_COMMIT_SHA: ${{ github.event.client_payload.pull_request.head.sha }}
#{{ .Config.Env | toYaml | indent 2 }}#

# This should cancel any previous runs of the same workflow on the same branch which are still running.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prerequisites:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      pull-requests: write
    uses: ./.github/workflows/prerequisites.yml
    secrets: inherit
    with:
      default_branch: ${{ github.event.repository.default_branch }}
      is_pr: ${{ github.event_name == 'pull_request' }}
      is_automated: ${{ github.actor == 'dependabot[bot]' }}

  build_provider:
    uses: ./.github/workflows/build_provider.yml
    needs: prerequisites
    secrets: inherit
    with:
      version: ${{ needs.prerequisites.outputs.version }}

  build_sdk:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    name: build_sdk
    needs: prerequisites
    uses: ./.github/workflows/build_sdk.yml
    secrets: inherit
    with:
      version: ${{ needs.prerequisites.outputs.version }}

  comment-notification:
    if: github.event_name == 'repository_dispatch'
    name: comment-notification
    permissions:
      pull-requests: write
    runs-on: #{{ .Config.Runner.Default }}#
    steps:
    - id: run-url
      name: Create URL to the run output
      run: echo "run-url=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> "$GITHUB_OUTPUT"
    - name: Update with Result
      uses: peter-evans/create-or-update-comment@v1
      with:
        body: "Please view the PR build: ${{ steps.run-url.outputs.run-url }}"
        issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
        repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
        token: ${{ secrets.GITHUB_TOKEN }}
  #{{ if .Config.Lint -}}#
  lint:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    name: lint
    uses: ./.github/workflows/lint.yml
    secrets: inherit
  #{{ end -}}#

  sentinel:
    name: sentinel
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      statuses: write
    needs:
    - test
    - build_provider
    - license_check
    #{{- if .Config.Lint }}#
    - lint
    #{{- end }}#
    #{{- range $action, $_ := .Config.ExtraTests }}#
    - #{{ $action }}#
    #{{- end }}#
    runs-on: #{{ .Config.Runner.Default }}#
    steps:
    - uses: guibranco/github-status-action-v2@0849440ec82c5fa69b2377725b9b7852a3977e76
      with:
        authToken: ${{secrets.GITHUB_TOKEN}}
        # Write an explicit status check called "Sentinel" which will only pass if this code really runs.
        # This should always be a required check for PRs.
        context: 'Sentinel'
        description: 'All required checks passed'
        state: 'success'
        # Write to the PR commit SHA if it's available as we don't want the merge commit sha,
        # otherwise use the current SHA for any other type of build.
        sha: ${{ github.event.pull_request.head.sha || github.sha }}

  test:
    if: github.event_name == 'repository_dispatch' ||
      github.event.pull_request.head.repo.full_name == github.repository
    name: test
    needs:
      - prerequisites
      - build_sdk
    permissions:
      contents: read
      id-token: write
    runs-on: #{{ if .Config.Runner.BuildSDK }}##{{- .Config.Runner.BuildSdk }}##{{ else }}##{{- .Config.Runner.Default }}##{{ end }}#
    env:
      PROVIDER_VERSION: ${{ needs.prerequisites.outputs.version }}
    steps:
#{{- if .Config.FreeDiskSpaceBeforeTest }}#
    # Run as first step so we don't delete things that have just been installed
    - name: Free Disk Space (Ubuntu)
      uses: #{{ .Config.ActionVersions.FreeDiskSpace }}#
      with:
        tool-cache: false
        swap-storage: false
        dotnet: false
#{{- end }}#
    - name: Checkout Repo
      uses: #{{ .Config.ActionVersions.Checkout }}#
      with:
        ref: ${{ env.PR_COMMIT_SHA }}
        #{{- if .Config.CheckoutSubmodules }}#
        submodules: #{{ .Config.CheckoutSubmodules }}#
        #{{- end }}#
        persist-credentials: false
    - name: Checkout p/examples
      if: matrix.testTarget == 'pulumiExamples'
      uses: #{{ .Config.ActionVersions.Checkout }}#
      with:
        repository: pulumi/examples
        path: p-examples
    - name: Setup tools
      uses: ./.github/actions/setup-tools
      with:
        tools: pulumictl, pulumicli, ${{ matrix.language }}
    - name: Download bin
      uses: ./.github/actions/download-bin
    - name: Add NuGet source
      if: matrix.language == 'dotnet'
      run: dotnet nuget add source ${{ github.workspace }}/nuget
    - name: Download SDK
      uses: ./.github/actions/download-sdk
      with:
        language: ${{ matrix.language }}
    - name: Update path
      run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
    - name: Install Python deps
      if: matrix.language == 'python'
      run: |-
        pip3 install virtualenv==20.0.23
        pip3 install pipenv
    #{{- if .Config.Docker }}#
    - name: Run docker compose
      run: docker compose -f testing/docker-compose.yml up --build -d
    #{{- end }}#
    #{{- if .Config.AWS }}#
    - name: Configure AWS Credentials
      uses: #{{ .Config.ActionVersions.ConfigureAwsCredentials }}#
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-region: ${{ env.AWS_REGION }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-duration-seconds: 7200
        role-session-name: #{{ .Config.Provider }}#@githubActions
        role-to-assume: ${{ secrets.AWS_CI_ROLE_ARN }}
    #{{- end }}#
    #{{- if .Config.GCP }}#
    - name: Authenticate to Google Cloud
      uses: #{{ .Config.ActionVersions.GoogleAuth }}#
      with:
        service_account: ${{ env.GOOGLE_CI_SERVICE_ACCOUNT_EMAIL }}
        workload_identity_provider: projects/${{ env.GOOGLE_PROJECT_NUMBER
          }}/locations/global/workloadIdentityPools/${{
          env.GOOGLE_CI_WORKLOAD_IDENTITY_POOL }}/providers/${{
          env.GOOGLE_CI_WORKLOAD_IDENTITY_PROVIDER }}
    - name: Setup gcloud auth
      uses: #{{ .Config.ActionVersions.SetupGcloud }}#
      with:
        install_components: gke-gcloud-auth-plugin
    #{{- end }}#
    #{{- if .Config.GCPRegistry }}#
    - name: Login to Google Cloud Registry
      run: gcloud --quiet auth configure-docker
    #{{- end }}#
    #{{- if .Config.SSHPrivateKey }}#
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: #{{ .Config.SSHPrivateKey }}#
    #{{- end }}#
    #{{- if .Config.IntegrationTestProvider }}#
    - name: Prepare upstream code
      run: make upstream
    #{{- end }}#
    #{{- if index .Config.SetupScript }}#
    - name: Run setup script
      run: #{{ index .Config.SetupScript }}#
    #{{- end }}#
    - name: Install dependencies
      run: make install_${{ matrix.language}}_sdk
    - name: Install gotestfmt
      uses: GoTestTools/gotestfmt-action@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        version: v2.5.0
#{{- if .Config.Actions.PreTest }}#
#{{ .Config.Actions.PreTest | toYaml | indent 4 }}#
#{{- end }}#
    #{{- if .Config.IntegrationTestProvider }}#
    - name: Run provider tests
      if: matrix.testTarget == 'local'
      working-directory: provider
      run: go test -count=1 -cover -timeout 2h -tags=${{ matrix.language }} -parallel 4 .
    #{{- end }}#
    - name: Run tests
      if: matrix.testTarget == 'local'
      run: cd examples && go test -count=1 -cover -timeout 2h -tags=${{ matrix.language }} -skip TestPulumiExamples -parallel 4 .
    - name: Run pulumi/examples tests
      if: matrix.testTarget == 'pulumiExamples'
      run: cd examples && go test -count=1 -cover -timeout 2h -tags=${{ matrix.language }} -run TestPulumiExamples -parallel 4 .
    strategy:
      fail-fast: false
      matrix:
        language:
#{{ .Config.Languages | toYaml | indent 8 }}#
        #{{- if .Config.TestPulumiExamples }}#
        testTarget: [local, pulumiExamples]
        #{{- else }}#
        testTarget: [local]
        #{{- end }}#
  license_check:
    name: License Check
    uses: ./.github/workflows/license.yml
    secrets: inherit
#{{- if .Config.ExtraTests }}#
#{{ .Config.ExtraTests | toYaml | indent 2 }}#
#{{ end }}#
